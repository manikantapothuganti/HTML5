package com.stackroute.datamunger.reader;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.regex.Pattern;

import com.stackroute.datamunger.query.DataTypeDefinitions;
import com.stackroute.datamunger.query.Header;

public class CsvQueryProcessor extends QueryProcessingEngine {
	private String fileName;
	

	

	public CsvQueryProcessor(String fileName) throws FileNotFoundException{
		super();
		this.fileName = fileName;
	}

	/*
	 * parameterized constructor to initialize filename. As you are trying to
	 * perform file reading, hence you need to be ready to handle the IO Exceptions.
	 */

	/*
	 * implementation of getHeader() method. We will have to extract the headers
	 * from the first line of the file.
	 */
	@Override
	public Header getHeader() throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(fileName));
		String header = br.readLine();
		br.close();
		String headerArray[] = header.split(",");
		Header headerObject = new Header(headerArray);
		return headerObject;
	}
	

	/**
	 * This method will be used in the upcoming assignments
	 */
	@Override
	public void getDataRow() {

	}

	/*
	 * implementation of getColumnType() method. To find out the data types, we will
	 * read the first line from the file and extract the field values from it. In
	 * the previous assignment, we have tried to convert a specific field value to
	 * Integer or Double. However, in this assignment, we are going to use Regular
	 * Expression to find the appropriate data type of a field. Integers: should
	 * contain only digits without decimal point Double: should contain digits as
	 * well as decimal point Date: Dates can be written in many formats in the CSV
	 * file. However, in this assignment,we will test for the following date
	 * formats('dd/mm/yyyy',
	 * 'mm/dd/yyyy','dd-mon-yy','dd-mon-yyyy','dd-month-yy','dd-month-yyyy','yyyy-mm-dd')
	 */
	@Override
	public DataTypeDefinitions getColumnType() throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(fileName));
		String header = br.readLine();
		String firstRow = br.readLine();
		br.close();
		String headerArray[] = header.split(",");
		String firstRowArray[] = firstRow.split(",");
		String dataTypeArray[] = new String[headerArray.length];
		// checking for Integer
				Pattern patternInt = Pattern.compile("[0-9]+");
				
				// checking for floating point numbers
				Pattern patternFloat = Pattern.compile("[0-9]+\\.[0-9]+");
				
				// checking for date format dd/mm/yyyy
				Pattern patternDate1 = Pattern.compile("((0[1-9]|[12]\\d|3[01])\\/(0[1-9]|1[0-2])\\/[12]\\d{3})");
				
				// checking for date format mm/dd/yyyy
				Pattern patternDate2 = Pattern.compile("((0[1-9]|1[0-2])\\/(0[1-9]|[12]\\d|3[01])\\/[12]\\d{3})");
				
				// checking for date format dd-mon-yy
				Pattern patternDate3 = Pattern.compile("((0[1-9]|1[0-2])-[a-zA-Z]{3}-\\d{2})");
				
				// checking for date format dd-mon-yyyy
				Pattern patternDate4 = Pattern.compile("((0[1-9]|1[0-2])-[a-zA-Z]{3}-[12]\\d{3})");
				
				// checking for date format dd-month-yy
				Pattern patternDate5 = Pattern.compile("((0[1-9]|1[0-2])-[January|February|March|April|May|June|July|August|September|October|November|December]-\\d{2})",Pattern.CASE_INSENSITIVE);
				
				// checking for date format dd-month-yyyy
				Pattern patternDate6 = Pattern.compile("((0[1-9]|1[0-2])-[January|February|March|April|May|June|July|August|September|October|November|December]-[12]\\d{3})",Pattern.CASE_INSENSITIVE);
				
				// checking for date format yyyy-mm-dd
				Pattern patternDate7 = Pattern.compile("([1-2]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))");
		
		
		
		
				for (int i=0;i<firstRowArray.length;i++) {
					if(patternInt.matcher(firstRowArray[i]).matches()) {
						Integer a =Integer.parseInt(firstRowArray[i]);
						dataTypeArray[i]= a.getClass().getName();
					}else if(patternFloat.matcher(firstRowArray[i]).matches()) {
						Float a =Float.parseFloat(firstRowArray[i]);
						dataTypeArray[i]=a.getClass().getName();
					}else if(patternDate1.matcher(firstRowArray[i]).matches()||patternDate2.matcher(firstRowArray[i]).matches()||patternDate3.matcher(firstRowArray[i]).matches()||patternDate4.matcher(firstRowArray[i]).matches()||patternDate5.matcher(firstRowArray[i]).matches()||patternDate6.matcher(firstRowArray[i]).matches()||patternDate7.matcher(firstRowArray[i]).matches()) {
						Date date = new Date();
						dataTypeArray[i]=date.getClass().getName();
					}else {
						if(firstRowArray[i].isEmpty()) {
							Object temp = new Object();
							dataTypeArray[i]=temp.getClass().getName();
						}else {
						dataTypeArray[i]=firstRowArray[i].getClass().getName();
						}
					}
				}
				DataTypeDefinitions dataTypeDefinitions = new DataTypeDefinitions(dataTypeArray);
				return dataTypeDefinitions;
			}
	
	

	
	

}
